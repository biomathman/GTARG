C$Procedure                         JRSMPL2C      DOUBLE PRECISION FUNCTION JRSMPL2 ( FLX , FLXBAR , KP, YEAR )CCC*******************************************************************************CC       Copyright (C) 1993, California Institute of Technology.  U.S.C       Government Sponsorhip under NASA Contract NAS7-918 isC       acknowledged.CC*******************************************************************************CC$ LogCC  12-JUN-1990 - Eric Cannell     - creation of JRSMPLC   1-MAY-1991 - Bruce Shapiro    - add average density, semiannual correctionC   1-DEC-1992 - B.S.		  - invoke USER_DENSITY if ATMOS='USER'C  21-APR-1994			  - add atdenhi, atdenloCC$ PurposeCC  JRSMPL2 computes atmospheric density using a model based upon 10 raisedC  to a quadratic ploynomial. CC	log rho = P(T) + a cos (2 * pi * t + phi1) + b cos (4 * pi * t + phi2 )CC  whereCC	T = T-infinity from the Jacchia Roberts model. It is C  	    T-infinity that is a function of solar flux (FLX), the 81-day movingC  	    average (FLXBAR), and the geomagnetic Kp index (KP). CC	t = time of the year, 1/1 at 00:00 ==> 0.0, 12/31 at 24:00 ==> 1.0CC	P(T) = quadratic polynomial expressed in terms of Chebyshev basisC	    (refer to MATH-77 library documentation for explanation of theC	    five coefficients required)CC$ Input_ArgumentsCC  Name    Type   Dim        Units   DescriptionC  -----------------------------------------------------------------------------C  FLX       DP     1    the usual   the solar fluxC  FLXBAR    DP     1    the usual   the 81 day moving average of solar flux C                                    ending on and including FLX. The GSFC's C                                    Jacchia-Robert source code indicates that C                                    the 81 day moving average should be C                                    centered on FLX, but this seems C                                    counter-intuitive.C  KP       DP      1    the usual   the geomagnetic Kp index. The GSFC's C                                    Jacchia-Robert source code uses the 3-hour C                                    Kp value, but for simplicity an C                                    interpolated Kp value will probably C                                    suffice.C  YEAR     DP      1    years	     Time into CURRENT year in fraction of aC				     yearCC$ Output_ArgumentsCC  Name    Type   Dim        Units   DescriptionC  -----------------------------------------------------------------------------C  JRSMPL    DP     1     kg/km**3   function return that is the atmospheric C                                    densityCC$ ReferencesCC  1] Marc A. Sengstacke, Fortran Subroutine JRDRIVE Version 3, 29 May 1990.C     JRDRIV is an implementation of the Jacchia-Roberts AtmosphericC     Density Model originally coded at GSFC.CC  2] Eric Cannel, JRSMPL-A Simple Fortran Function to Approximate C     Atmospheric Density, JPL IOM No. 314.9/90-481, 13 June 1990.CC  3] Bruce Shapiro, Improved Approximation to Simplified Jacchia-RobertsC     Density Model, JPL IOM No. TBD, May 1991.CC  4] JPL Applied Mathematics Group, MATH77, Release 3.0, A Library of C     Mathematical Subprograms for FORTRAN-77, JPL D-1341, Rev. B, C     May 1989.CC$ RestrictionsCC  1] JRFIT assumes that the 4000+ daily samples over a 10 years periodC     cover an appropriate range of solar flux and Kp values.CC$ Library_LinksCC  MATH77CC$ Declarations_of_Input_and_Output_ArgumentsC      DOUBLE PRECISION     FLX		! Solar Flux, 1 day lag      DOUBLE PRECISION     FLXBAR	! 81-Day centered Mean of FLX      DOUBLE PRECISION     KP		! Kp index, 6.7 hour lag      DOUBLE PRECISION     YEAR		! Fraction of year      common  /dragblock/  dragmodel, dragarea, atmos, atden,     &		ATDENHI, ATDENLO,     &          FLUX_SLOPE, FBAR_SLOPE, FLUX_BIAS, FBAR_BIAS,     &          ATDEN_POLY, ATDEN_ANN, ATDEN_SEMI      character*10 dragmodel, atmos      double precision dragarea, atden,atdenhi, atdenlo      double precision     FLUX_SLOPE(6), FBAR_SLOPE(6)      double precision     FLUX_BIAS(6), FBAR_BIAS(6)      double precision     ATDEN_POLY(5), ATDEN_ANN(2)      double precision     ATDEN_SEMI(2)CC$ Declarations_of_Local_VariablesC      DOUBLE PRECISION     DTINF	! Kp contribution to T-infinity      DOUBLE PRECISION     LOG_RHO	! Log base 10 of density fit      DOUBLE PRECISION     MAG_ANNUAL	! Magnitude of Annual correction      DOUBLE PRECISION     MAG_SEMIANNUAL      INTEGER              NDEG		! Order of polynomial fit      DOUBLE PRECISION     P      ( 5 ) ! Coefficients of polynomial fit      DOUBLE PRECISION     PHASE_ANNUAL ! Phase of Annual/Semiannual correction      DOUBLE PRECISION     PHASE_SEMIANNUAL      DOUBLE PRECISION     RHO		! Density , kg/m**3      DOUBLE PRECISION     TC		! F10.7 and FLXBAR contr. to T-infinity      DOUBLE PRECISION     TINF		! T-infinity, exospheric temperature      DOUBLE PRECISION     PIC                                                 C$ External_Statements           C      DOUBLE PRECISION     DCPVAL	! Polynomial evaluation in MATH77      EXTERNAL             DCPVALCC$ Data_StatementsC      DATA      NDEG   		 / 2 /      DATA      P      		 / 0.102444406127929688D+04,     &				  0.414349639892578125D+03,     &				  -.581061572488852007D+01,     &				  0.720650161644122988D+00,     &				  0.842769258090778408D-04 /      data	MAG_SEMIANNUAL 	/-0.0791350355550989d+00 /      data	phase_SEMIANNUAL/5.4144904588160714d+00/      data	mag_annual 	/0.0454889572120465d+00/      data	phase_annual	/6.1054952840340235d+00/      logical first      data    first/.true./C      Parameter (PI = 3.141592653589893238d0)CC$ MethodC-&      if (ATMOS .EQ. 'CONSTANT' ) then	 if (first) then 	    write(8,*) 'Using Constant Density Atmosphere.'	    first = .false.	 end if         JRSMPL2 = ATDEN	 return      else if ((ATMOS .NE. 'TOPEXJR').and.     &	       (ATMOS .NE. 'POLYNOMIAL') ) then	 if (first) then 	    write(8,*) 'Using User-Supplied Density Function.'	    first = .false.	 end if         JRSMPL2 = USER_DENSITY ( YEAR, FLX, FLXBAR, KP )	 return      end if      if (first) then 	write(8,*) 'Using Average Orbital Jacchia-Roberts Atmosphere'	first = .false.      end ifC1    Compute delta-T-infinity.      DTINF = 28.0D0 * KP + 0.03D0 * DEXP( KP )C1    Compute Tc.      TC    = 379.0D0 + 3.24 * FLXBAR + 1.3D0 * ( FLX - FLXBAR )C1    Compute T-infinity.      TINF  = TC + DTINFC1    Compute density via simple model, 10**a+bx+cx**2. DCPVALC1    is a MATH77 routine that evaluates the quadratic exponent. (I used C1    MATH77's DPFIT to fit the quadratic to 4018 data points.)      IF (ATMOS .EQ. 'TOPEXJR') then        LOG_RHO = DCPVAL ( P, NDEG, TINF ) +     &    Mag_semiannual * dcos ( 4 * pi * year + phase_semiannual) +      &    Mag_annual * dcos ( 2 * pi * year + phase_annual )       else IF (ATMOS .EQ. 'POLYNOMIAL') then        LOG_RHO = DCPVAL ( ATDEN_POLY, NDEG, TINF ) +     &    ATDEN_SEMI(1) * dcos ( 4 * pi * year + ATDEN_SEMI(2)) +      &    ATDEN_ANN(1)  * dcos ( 2 * pi * year + ATDEN_ANN(2) )       else        write(8,*) '>>> ERROR: INVALID ATMOS = ',ATMOS        stop 'ERROR EXIT: Invalid ATMOS input'      end if      RHO   = 10D0 ** log_rhoC1    Return the density.      JRSMPL2 = RHO      RETURN      END